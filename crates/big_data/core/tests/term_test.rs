use core::big_data::RowData;
use core::big_data::RowTerm;
use core::traits::FromBytes;
use core::traits::ToBytes;
use erlang_term::RawTerm;
#[test]
fn term() {
    let bin = &[
        131, 104, 4, 100, 0, 8, 114, 111, 119, 95, 100, 97, 116, 97, 109, 0, 0, 0, 1, 49, 104, 2,
        100, 0, 1, 97, 100, 0, 1, 98, 110, 6, 0, 110, 46, 12, 225, 125, 1,
    ];
    let term = Vec::<RowData>::from_bytes(bin).unwrap();
    assert_eq!(
        RowData::new(
            "1",
            RowTerm::Tuple(vec![RowTerm::Atom("a".into()), RowTerm::Atom("b".into())]),
            1640158211694
        ),
        term[0]
    );
    let b: Vec<u8> = term.to_bytes().unwrap();
    let term1 = Vec::<RowData>::from_bytes(b.as_slice()).unwrap();
    assert_eq!(term, term1);
    let b = &[131, 107, 0, 1, 0];
    let r = RawTerm::from_bytes(b);
    assert_eq!(RawTerm::String(vec![0]), r.unwrap());
    let r = RowTerm::from_bytes(b);
    let v: Vec<u8> = vec![0];
    assert_eq!(
        RowTerm::Bitstring(String::from_utf8(v).unwrap()),
        r.unwrap()
    );
    let bin = &[
        131, 108, 0, 0, 1, 144, 97, 1, 97, 2, 97, 3, 97, 4, 97, 5, 97, 6, 97, 7, 97, 8, 97, 9, 97,
        10, 97, 11, 97, 12, 97, 13, 97, 14, 97, 15, 97, 16, 97, 17, 97, 18, 97, 19, 97, 20, 97, 21,
        97, 22, 97, 23, 97, 24, 97, 25, 97, 26, 97, 27, 97, 28, 97, 29, 97, 30, 97, 31, 97, 32, 97,
        33, 97, 34, 97, 35, 97, 36, 97, 37, 97, 38, 97, 39, 97, 40, 97, 41, 97, 42, 97, 43, 97, 44,
        97, 45, 97, 46, 97, 47, 97, 48, 97, 49, 97, 50, 97, 51, 97, 52, 97, 53, 97, 54, 97, 55, 97,
        56, 97, 57, 97, 58, 97, 59, 97, 60, 97, 61, 97, 62, 97, 63, 97, 64, 97, 65, 97, 66, 97, 67,
        97, 68, 97, 69, 97, 70, 97, 71, 97, 72, 97, 73, 97, 74, 97, 75, 97, 76, 97, 77, 97, 78, 97,
        79, 97, 80, 97, 81, 97, 82, 97, 83, 97, 84, 97, 85, 97, 86, 97, 87, 97, 88, 97, 89, 97, 90,
        97, 91, 97, 92, 97, 93, 97, 94, 97, 95, 97, 96, 97, 97, 97, 98, 97, 99, 97, 100, 97, 101,
        97, 102, 97, 103, 97, 104, 97, 105, 97, 106, 97, 107, 97, 108, 97, 109, 97, 110, 97, 111,
        97, 112, 97, 113, 97, 114, 97, 115, 97, 116, 97, 117, 97, 118, 97, 119, 97, 120, 97, 121,
        97, 122, 97, 123, 97, 124, 97, 125, 97, 126, 97, 127, 97, 128, 97, 129, 97, 130, 97, 131,
        97, 132, 97, 133, 97, 134, 97, 135, 97, 136, 97, 137, 97, 138, 97, 139, 97, 140, 97, 141,
        97, 142, 97, 143, 97, 144, 97, 145, 97, 146, 97, 147, 97, 148, 97, 149, 97, 150, 97, 151,
        97, 152, 97, 153, 97, 154, 97, 155, 97, 156, 97, 157, 97, 158, 97, 159, 97, 160, 97, 161,
        97, 162, 97, 163, 97, 164, 97, 165, 97, 166, 97, 167, 97, 168, 97, 169, 97, 170, 97, 171,
        97, 172, 97, 173, 97, 174, 97, 175, 97, 176, 97, 177, 97, 178, 97, 179, 97, 180, 97, 181,
        97, 182, 97, 183, 97, 184, 97, 185, 97, 186, 97, 187, 97, 188, 97, 189, 97, 190, 97, 191,
        97, 192, 97, 193, 97, 194, 97, 195, 97, 196, 97, 197, 97, 198, 97, 199, 97, 200, 97, 201,
        97, 202, 97, 203, 97, 204, 97, 205, 97, 206, 97, 207, 97, 208, 97, 209, 97, 210, 97, 211,
        97, 212, 97, 213, 97, 214, 97, 215, 97, 216, 97, 217, 97, 218, 97, 219, 97, 220, 97, 221,
        97, 222, 97, 223, 97, 224, 97, 225, 97, 226, 97, 227, 97, 228, 97, 229, 97, 230, 97, 231,
        97, 232, 97, 233, 97, 234, 97, 235, 97, 236, 97, 237, 97, 238, 97, 239, 97, 240, 97, 241,
        97, 242, 97, 243, 97, 244, 97, 245, 97, 246, 97, 247, 97, 248, 97, 249, 97, 250, 97, 251,
        97, 252, 97, 253, 97, 254, 97, 255, 98, 0, 0, 1, 0, 98, 0, 0, 1, 1, 98, 0, 0, 1, 2, 98, 0,
        0, 1, 3, 98, 0, 0, 1, 4, 98, 0, 0, 1, 5, 98, 0, 0, 1, 6, 98, 0, 0, 1, 7, 98, 0, 0, 1, 8,
        98, 0, 0, 1, 9, 98, 0, 0, 1, 10, 98, 0, 0, 1, 11, 98, 0, 0, 1, 12, 98, 0, 0, 1, 13, 98, 0,
        0, 1, 14, 98, 0, 0, 1, 15, 98, 0, 0, 1, 16, 98, 0, 0, 1, 17, 98, 0, 0, 1, 18, 98, 0, 0, 1,
        19, 98, 0, 0, 1, 20, 98, 0, 0, 1, 21, 98, 0, 0, 1, 22, 98, 0, 0, 1, 23, 98, 0, 0, 1, 24,
        98, 0, 0, 1, 25, 98, 0, 0, 1, 26, 98, 0, 0, 1, 27, 98, 0, 0, 1, 28, 98, 0, 0, 1, 29, 98, 0,
        0, 1, 30, 98, 0, 0, 1, 31, 98, 0, 0, 1, 32, 98, 0, 0, 1, 33, 98, 0, 0, 1, 34, 98, 0, 0, 1,
        35, 98, 0, 0, 1, 36, 98, 0, 0, 1, 37, 98, 0, 0, 1, 38, 98, 0, 0, 1, 39, 98, 0, 0, 1, 40,
        98, 0, 0, 1, 41, 98, 0, 0, 1, 42, 98, 0, 0, 1, 43, 98, 0, 0, 1, 44, 98, 0, 0, 1, 45, 98, 0,
        0, 1, 46, 98, 0, 0, 1, 47, 98, 0, 0, 1, 48, 98, 0, 0, 1, 49, 98, 0, 0, 1, 50, 98, 0, 0, 1,
        51, 98, 0, 0, 1, 52, 98, 0, 0, 1, 53, 98, 0, 0, 1, 54, 98, 0, 0, 1, 55, 98, 0, 0, 1, 56,
        98, 0, 0, 1, 57, 98, 0, 0, 1, 58, 98, 0, 0, 1, 59, 98, 0, 0, 1, 60, 98, 0, 0, 1, 61, 98, 0,
        0, 1, 62, 98, 0, 0, 1, 63, 98, 0, 0, 1, 64, 98, 0, 0, 1, 65, 98, 0, 0, 1, 66, 98, 0, 0, 1,
        67, 98, 0, 0, 1, 68, 98, 0, 0, 1, 69, 98, 0, 0, 1, 70, 98, 0, 0, 1, 71, 98, 0, 0, 1, 72,
        98, 0, 0, 1, 73, 98, 0, 0, 1, 74, 98, 0, 0, 1, 75, 98, 0, 0, 1, 76, 98, 0, 0, 1, 77, 98, 0,
        0, 1, 78, 98, 0, 0, 1, 79, 98, 0, 0, 1, 80, 98, 0, 0, 1, 81, 98, 0, 0, 1, 82, 98, 0, 0, 1,
        83, 98, 0, 0, 1, 84, 98, 0, 0, 1, 85, 98, 0, 0, 1, 86, 98, 0, 0, 1, 87, 98, 0, 0, 1, 88,
        98, 0, 0, 1, 89, 98, 0, 0, 1, 90, 98, 0, 0, 1, 91, 98, 0, 0, 1, 92, 98, 0, 0, 1, 93, 98, 0,
        0, 1, 94, 98, 0, 0, 1, 95, 98, 0, 0, 1, 96, 98, 0, 0, 1, 97, 98, 0, 0, 1, 98, 98, 0, 0, 1,
        99, 98, 0, 0, 1, 100, 98, 0, 0, 1, 101, 98, 0, 0, 1, 102, 98, 0, 0, 1, 103, 98, 0, 0, 1,
        104, 98, 0, 0, 1, 105, 98, 0, 0, 1, 106, 98, 0, 0, 1, 107, 98, 0, 0, 1, 108, 98, 0, 0, 1,
        109, 98, 0, 0, 1, 110, 98, 0, 0, 1, 111, 98, 0, 0, 1, 112, 98, 0, 0, 1, 113, 98, 0, 0, 1,
        114, 98, 0, 0, 1, 115, 98, 0, 0, 1, 116, 98, 0, 0, 1, 117, 98, 0, 0, 1, 118, 98, 0, 0, 1,
        119, 98, 0, 0, 1, 120, 98, 0, 0, 1, 121, 98, 0, 0, 1, 122, 98, 0, 0, 1, 123, 98, 0, 0, 1,
        124, 98, 0, 0, 1, 125, 98, 0, 0, 1, 126, 98, 0, 0, 1, 127, 98, 0, 0, 1, 128, 98, 0, 0, 1,
        129, 98, 0, 0, 1, 130, 98, 0, 0, 1, 131, 98, 0, 0, 1, 132, 98, 0, 0, 1, 133, 98, 0, 0, 1,
        134, 98, 0, 0, 1, 135, 98, 0, 0, 1, 136, 98, 0, 0, 1, 137, 98, 0, 0, 1, 138, 98, 0, 0, 1,
        139, 98, 0, 0, 1, 140, 98, 0, 0, 1, 141, 98, 0, 0, 1, 142, 98, 0, 0, 1, 143, 98, 0, 0, 1,
        144, 106,
    ];
    assert_eq!(true, RawTerm::from_bytes(bin).is_ok());

    let bin = &[
        131, 104, 4, 100, 0, 8, 114, 111, 119, 95, 100, 97, 116, 97, 109, 0, 0, 0, 3, 107, 107,
        107, 105, 0, 0, 1, 144, 97, 1, 97, 2, 97, 3, 97, 4, 97, 5, 97, 6, 97, 7, 97, 8, 97, 9, 97,
        10, 97, 11, 97, 12, 97, 13, 97, 14, 97, 15, 97, 16, 97, 17, 97, 18, 97, 19, 97, 20, 97, 21,
        97, 22, 97, 23, 97, 24, 97, 25, 97, 26, 97, 27, 97, 28, 97, 29, 97, 30, 97, 31, 97, 32, 97,
        33, 97, 34, 97, 35, 97, 36, 97, 37, 97, 38, 97, 39, 97, 40, 97, 41, 97, 42, 97, 43, 97, 44,
        97, 45, 97, 46, 97, 47, 97, 48, 97, 49, 97, 50, 97, 51, 97, 52, 97, 53, 97, 54, 97, 55, 97,
        56, 97, 57, 97, 58, 97, 59, 97, 60, 97, 61, 97, 62, 97, 63, 97, 64, 97, 65, 97, 66, 97, 67,
        97, 68, 97, 69, 97, 70, 97, 71, 97, 72, 97, 73, 97, 74, 97, 75, 97, 76, 97, 77, 97, 78, 97,
        79, 97, 80, 97, 81, 97, 82, 97, 83, 97, 84, 97, 85, 97, 86, 97, 87, 97, 88, 97, 89, 97, 90,
        97, 91, 97, 92, 97, 93, 97, 94, 97, 95, 97, 96, 97, 97, 97, 98, 97, 99, 97, 100, 97, 101,
        97, 102, 97, 103, 97, 104, 97, 105, 97, 106, 97, 107, 97, 108, 97, 109, 97, 110, 97, 111,
        97, 112, 97, 113, 97, 114, 97, 115, 97, 116, 97, 117, 97, 118, 97, 119, 97, 120, 97, 121,
        97, 122, 97, 123, 97, 124, 97, 125, 97, 126, 97, 127, 97, 128, 97, 129, 97, 130, 97, 131,
        97, 132, 97, 133, 97, 134, 97, 135, 97, 136, 97, 137, 97, 138, 97, 139, 97, 140, 97, 141,
        97, 142, 97, 143, 97, 144, 97, 145, 97, 146, 97, 147, 97, 148, 97, 149, 97, 150, 97, 151,
        97, 152, 97, 153, 97, 154, 97, 155, 97, 156, 97, 157, 97, 158, 97, 159, 97, 160, 97, 161,
        97, 162, 97, 163, 97, 164, 97, 165, 97, 166, 97, 167, 97, 168, 97, 169, 97, 170, 97, 171,
        97, 172, 97, 173, 97, 174, 97, 175, 97, 176, 97, 177, 97, 178, 97, 179, 97, 180, 97, 181,
        97, 182, 97, 183, 97, 184, 97, 185, 97, 186, 97, 187, 97, 188, 97, 189, 97, 190, 97, 191,
        97, 192, 97, 193, 97, 194, 97, 195, 97, 196, 97, 197, 97, 198, 97, 199, 97, 200, 97, 201,
        97, 202, 97, 203, 97, 204, 97, 205, 97, 206, 97, 207, 97, 208, 97, 209, 97, 210, 97, 211,
        97, 212, 97, 213, 97, 214, 97, 215, 97, 216, 97, 217, 97, 218, 97, 219, 97, 220, 97, 221,
        97, 222, 97, 223, 97, 224, 97, 225, 97, 226, 97, 227, 97, 228, 97, 229, 97, 230, 97, 231,
        97, 232, 97, 233, 97, 234, 97, 235, 97, 236, 97, 237, 97, 238, 97, 239, 97, 240, 97, 241,
        97, 242, 97, 243, 97, 244, 97, 245, 97, 246, 97, 247, 97, 248, 97, 249, 97, 250, 97, 251,
        97, 252, 97, 253, 97, 254, 97, 255, 98, 0, 0, 1, 0, 98, 0, 0, 1, 1, 98, 0, 0, 1, 2, 98, 0,
        0, 1, 3, 98, 0, 0, 1, 4, 98, 0, 0, 1, 5, 98, 0, 0, 1, 6, 98, 0, 0, 1, 7, 98, 0, 0, 1, 8,
        98, 0, 0, 1, 9, 98, 0, 0, 1, 10, 98, 0, 0, 1, 11, 98, 0, 0, 1, 12, 98, 0, 0, 1, 13, 98, 0,
        0, 1, 14, 98, 0, 0, 1, 15, 98, 0, 0, 1, 16, 98, 0, 0, 1, 17, 98, 0, 0, 1, 18, 98, 0, 0, 1,
        19, 98, 0, 0, 1, 20, 98, 0, 0, 1, 21, 98, 0, 0, 1, 22, 98, 0, 0, 1, 23, 98, 0, 0, 1, 24,
        98, 0, 0, 1, 25, 98, 0, 0, 1, 26, 98, 0, 0, 1, 27, 98, 0, 0, 1, 28, 98, 0, 0, 1, 29, 98, 0,
        0, 1, 30, 98, 0, 0, 1, 31, 98, 0, 0, 1, 32, 98, 0, 0, 1, 33, 98, 0, 0, 1, 34, 98, 0, 0, 1,
        35, 98, 0, 0, 1, 36, 98, 0, 0, 1, 37, 98, 0, 0, 1, 38, 98, 0, 0, 1, 39, 98, 0, 0, 1, 40,
        98, 0, 0, 1, 41, 98, 0, 0, 1, 42, 98, 0, 0, 1, 43, 98, 0, 0, 1, 44, 98, 0, 0, 1, 45, 98, 0,
        0, 1, 46, 98, 0, 0, 1, 47, 98, 0, 0, 1, 48, 98, 0, 0, 1, 49, 98, 0, 0, 1, 50, 98, 0, 0, 1,
        51, 98, 0, 0, 1, 52, 98, 0, 0, 1, 53, 98, 0, 0, 1, 54, 98, 0, 0, 1, 55, 98, 0, 0, 1, 56,
        98, 0, 0, 1, 57, 98, 0, 0, 1, 58, 98, 0, 0, 1, 59, 98, 0, 0, 1, 60, 98, 0, 0, 1, 61, 98, 0,
        0, 1, 62, 98, 0, 0, 1, 63, 98, 0, 0, 1, 64, 98, 0, 0, 1, 65, 98, 0, 0, 1, 66, 98, 0, 0, 1,
        67, 98, 0, 0, 1, 68, 98, 0, 0, 1, 69, 98, 0, 0, 1, 70, 98, 0, 0, 1, 71, 98, 0, 0, 1, 72,
        98, 0, 0, 1, 73, 98, 0, 0, 1, 74, 98, 0, 0, 1, 75, 98, 0, 0, 1, 76, 98, 0, 0, 1, 77, 98, 0,
        0, 1, 78, 98, 0, 0, 1, 79, 98, 0, 0, 1, 80, 98, 0, 0, 1, 81, 98, 0, 0, 1, 82, 98, 0, 0, 1,
        83, 98, 0, 0, 1, 84, 98, 0, 0, 1, 85, 98, 0, 0, 1, 86, 98, 0, 0, 1, 87, 98, 0, 0, 1, 88,
        98, 0, 0, 1, 89, 98, 0, 0, 1, 90, 98, 0, 0, 1, 91, 98, 0, 0, 1, 92, 98, 0, 0, 1, 93, 98, 0,
        0, 1, 94, 98, 0, 0, 1, 95, 98, 0, 0, 1, 96, 98, 0, 0, 1, 97, 98, 0, 0, 1, 98, 98, 0, 0, 1,
        99, 98, 0, 0, 1, 100, 98, 0, 0, 1, 101, 98, 0, 0, 1, 102, 98, 0, 0, 1, 103, 98, 0, 0, 1,
        104, 98, 0, 0, 1, 105, 98, 0, 0, 1, 106, 98, 0, 0, 1, 107, 98, 0, 0, 1, 108, 98, 0, 0, 1,
        109, 98, 0, 0, 1, 110, 98, 0, 0, 1, 111, 98, 0, 0, 1, 112, 98, 0, 0, 1, 113, 98, 0, 0, 1,
        114, 98, 0, 0, 1, 115, 98, 0, 0, 1, 116, 98, 0, 0, 1, 117, 98, 0, 0, 1, 118, 98, 0, 0, 1,
        119, 98, 0, 0, 1, 120, 98, 0, 0, 1, 121, 98, 0, 0, 1, 122, 98, 0, 0, 1, 123, 98, 0, 0, 1,
        124, 98, 0, 0, 1, 125, 98, 0, 0, 1, 126, 98, 0, 0, 1, 127, 98, 0, 0, 1, 128, 98, 0, 0, 1,
        129, 98, 0, 0, 1, 130, 98, 0, 0, 1, 131, 98, 0, 0, 1, 132, 98, 0, 0, 1, 133, 98, 0, 0, 1,
        134, 98, 0, 0, 1, 135, 98, 0, 0, 1, 136, 98, 0, 0, 1, 137, 98, 0, 0, 1, 138, 98, 0, 0, 1,
        139, 98, 0, 0, 1, 140, 98, 0, 0, 1, 141, 98, 0, 0, 1, 142, 98, 0, 0, 1, 143, 98, 0, 0, 1,
        144, 97, 10,
    ];
    let row = Vec::<RowData>::from_bytes(bin);
    assert_eq!(true, row.is_ok());
}
#[test]
fn pid() {
    let bin = &[
        131, 88, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0,
        0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    let row = RowTerm::from_bytes(bin);
    assert_eq!(true, row.is_ok());
}
#[test]
fn function() {
    let bin = &[
        131, 112, 0, 0, 2, 195, 0, 241, 72, 50, 109, 70, 84, 198, 45, 20, 94, 42, 25, 184, 243, 5,
        100, 0, 0, 0, 21, 0, 0, 0, 1, 100, 0, 8, 101, 114, 108, 95, 101, 118, 97, 108, 97, 21, 98,
        7, 138, 65, 147, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111,
        115, 116, 0, 0, 0, 79, 0, 0, 0, 0, 0, 104, 4, 106, 104, 2, 100, 0, 4, 101, 118, 97, 108,
        112, 0, 0, 1, 215, 3, 210, 129, 155, 178, 2, 132, 194, 90, 231, 44, 220, 47, 80, 87, 56,
        91, 0, 0, 0, 21, 0, 0, 0, 4, 100, 0, 5, 115, 104, 101, 108, 108, 97, 21, 98, 6, 148, 12,
        221, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0,
        0, 79, 0, 0, 0, 0, 0, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104,
        111, 115, 116, 0, 0, 0, 73, 0, 0, 0, 0, 0, 114, 0, 3, 100, 0, 13, 110, 111, 110, 111, 100,
        101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0, 251, 202, 56, 202, 0, 4, 232, 255, 183, 13,
        104, 2, 100, 0, 5, 118, 97, 108, 117, 101, 112, 0, 0, 0, 96, 2, 210, 129, 155, 178, 2, 132,
        194, 90, 231, 44, 220, 47, 80, 87, 56, 91, 0, 0, 0, 5, 0, 0, 0, 1, 100, 0, 5, 115, 104,
        101, 108, 108, 97, 5, 98, 6, 148, 12, 221, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101,
        64, 110, 111, 104, 111, 115, 116, 0, 0, 0, 79, 0, 0, 0, 0, 0, 103, 100, 0, 13, 110, 111,
        110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0, 73, 0, 0, 0, 0, 0, 112, 0,
        0, 0, 235, 1, 210, 129, 155, 178, 2, 132, 194, 90, 231, 44, 220, 47, 80, 87, 56, 91, 0, 0,
        0, 12, 0, 0, 0, 3, 100, 0, 5, 115, 104, 101, 108, 108, 97, 12, 98, 6, 148, 12, 221, 103,
        100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0, 79, 0,
        0, 0, 0, 0, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115,
        116, 0, 0, 0, 73, 0, 0, 0, 0, 0, 114, 0, 3, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64,
        110, 111, 104, 111, 115, 116, 0, 0, 0, 251, 202, 56, 202, 0, 4, 232, 255, 183, 13, 104, 2,
        100, 0, 5, 118, 97, 108, 117, 101, 112, 0, 0, 0, 96, 2, 210, 129, 155, 178, 2, 132, 194,
        90, 231, 44, 220, 47, 80, 87, 56, 91, 0, 0, 0, 5, 0, 0, 0, 1, 100, 0, 5, 115, 104, 101,
        108, 108, 97, 5, 98, 6, 148, 12, 221, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64,
        110, 111, 104, 111, 115, 116, 0, 0, 0, 79, 0, 0, 0, 0, 0, 103, 100, 0, 13, 110, 111, 110,
        111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0, 73, 0, 0, 0, 0, 0, 104, 2, 100,
        0, 5, 118, 97, 108, 117, 101, 112, 0, 0, 0, 96, 2, 210, 129, 155, 178, 2, 132, 194, 90,
        231, 44, 220, 47, 80, 87, 56, 91, 0, 0, 0, 5, 0, 0, 0, 1, 100, 0, 5, 115, 104, 101, 108,
        108, 97, 5, 98, 6, 148, 12, 221, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110,
        111, 104, 111, 115, 116, 0, 0, 0, 79, 0, 0, 0, 0, 0, 103, 100, 0, 13, 110, 111, 110, 111,
        100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0, 73, 0, 0, 0, 0, 0, 108, 0, 0, 0, 1,
        104, 5, 100, 0, 6, 99, 108, 97, 117, 115, 101, 97, 1, 106, 106, 108, 0, 0, 0, 1, 104, 3,
        100, 0, 4, 97, 116, 111, 109, 97, 1, 100, 0, 2, 111, 107, 106, 106,
    ];
    let row = RowTerm::from_bytes(bin);
    assert_eq!(true, row.is_ok());
    let input = &[
        131, 104, 4, 100, 0, 8, 114, 111, 119, 95, 100, 97, 116, 97, 109, 0, 0, 0, 1, 49, 112, 0,
        0, 2, 195, 0, 241, 72, 50, 109, 70, 84, 198, 45, 20, 94, 42, 25, 184, 243, 5, 100, 0, 0, 0,
        21, 0, 0, 0, 1, 100, 0, 8, 101, 114, 108, 95, 101, 118, 97, 108, 97, 21, 98, 7, 138, 65,
        147, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0,
        0, 79, 0, 0, 0, 0, 0, 104, 4, 106, 104, 2, 100, 0, 4, 101, 118, 97, 108, 112, 0, 0, 1, 215,
        3, 210, 129, 155, 178, 2, 132, 194, 90, 231, 44, 220, 47, 80, 87, 56, 91, 0, 0, 0, 21, 0,
        0, 0, 4, 100, 0, 5, 115, 104, 101, 108, 108, 97, 21, 98, 6, 148, 12, 221, 103, 100, 0, 13,
        110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0, 79, 0, 0, 0, 0, 0,
        103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0,
        73, 0, 0, 0, 0, 0, 114, 0, 3, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104,
        111, 115, 116, 0, 0, 0, 39, 213, 201, 70, 0, 2, 48, 137, 218, 27, 104, 2, 100, 0, 5, 118,
        97, 108, 117, 101, 112, 0, 0, 0, 96, 2, 210, 129, 155, 178, 2, 132, 194, 90, 231, 44, 220,
        47, 80, 87, 56, 91, 0, 0, 0, 5, 0, 0, 0, 1, 100, 0, 5, 115, 104, 101, 108, 108, 97, 5, 98,
        6, 148, 12, 221, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111,
        115, 116, 0, 0, 0, 79, 0, 0, 0, 0, 0, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64,
        110, 111, 104, 111, 115, 116, 0, 0, 0, 73, 0, 0, 0, 0, 0, 112, 0, 0, 0, 235, 1, 210, 129,
        155, 178, 2, 132, 194, 90, 231, 44, 220, 47, 80, 87, 56, 91, 0, 0, 0, 12, 0, 0, 0, 3, 100,
        0, 5, 115, 104, 101, 108, 108, 97, 12, 98, 6, 148, 12, 221, 103, 100, 0, 13, 110, 111, 110,
        111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0, 79, 0, 0, 0, 0, 0, 103, 100, 0,
        13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0, 73, 0, 0, 0,
        0, 0, 114, 0, 3, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115,
        116, 0, 0, 0, 39, 213, 201, 70, 0, 2, 48, 137, 218, 27, 104, 2, 100, 0, 5, 118, 97, 108,
        117, 101, 112, 0, 0, 0, 96, 2, 210, 129, 155, 178, 2, 132, 194, 90, 231, 44, 220, 47, 80,
        87, 56, 91, 0, 0, 0, 5, 0, 0, 0, 1, 100, 0, 5, 115, 104, 101, 108, 108, 97, 5, 98, 6, 148,
        12, 221, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116,
        0, 0, 0, 79, 0, 0, 0, 0, 0, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111,
        104, 111, 115, 116, 0, 0, 0, 73, 0, 0, 0, 0, 0, 104, 2, 100, 0, 5, 118, 97, 108, 117, 101,
        112, 0, 0, 0, 96, 2, 210, 129, 155, 178, 2, 132, 194, 90, 231, 44, 220, 47, 80, 87, 56, 91,
        0, 0, 0, 5, 0, 0, 0, 1, 100, 0, 5, 115, 104, 101, 108, 108, 97, 5, 98, 6, 148, 12, 221,
        103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111, 115, 116, 0, 0, 0,
        79, 0, 0, 0, 0, 0, 103, 100, 0, 13, 110, 111, 110, 111, 100, 101, 64, 110, 111, 104, 111,
        115, 116, 0, 0, 0, 73, 0, 0, 0, 0, 0, 108, 0, 0, 0, 1, 104, 5, 100, 0, 6, 99, 108, 97, 117,
        115, 101, 97, 1, 106, 106, 108, 0, 0, 0, 1, 104, 3, 100, 0, 4, 97, 116, 111, 109, 97, 1,
        100, 0, 2, 111, 107, 106, 106, 98, 97, 239, 171, 43,
    ];
    let row = Vec::<RowData>::from_bytes(input);
    // println!("{:?}", row);
    assert_eq!(true, row.is_ok());
}
